/* tslint:disable */
/* eslint-disable */
/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { User } from '../../model'
// @ts-ignore
import type { UsersIdPutRequest } from '../../model'
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Gets the user that corresponds to the access token used in the request.
     * @summary Get the authorised user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    meGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/me`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Gets a user by ID. You must be authorised as the target user in order to make this request.
     * @summary Get user
     * @param {number} id The unique identifier of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('usersIdGet', 'id', id)
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Updates the user by their ID. You must be authorised as the target user in order to make this request.
     * @summary Update user
     * @param {number} id The unique identifier of the user.
     * @param {UsersIdPutRequest} [usersIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdPut: async (
      id: number,
      usersIdPutRequest?: UsersIdPutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('usersIdPut', 'id', id)
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(usersIdPutRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
  return {
    /**
     * Gets the user that corresponds to the access token used in the request.
     * @summary Get the authorised user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async meGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.meGet(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath = operationServerMap['UsersApi.meGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Gets a user by ID. You must be authorised as the target user in order to make this request.
     * @summary Get user
     * @param {number} id The unique identifier of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UsersApi.usersIdGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Updates the user by their ID. You must be authorised as the target user in order to make this request.
     * @summary Update user
     * @param {number} id The unique identifier of the user.
     * @param {UsersIdPutRequest} [usersIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersIdPut(
      id: number,
      usersIdPutRequest?: UsersIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdPut(id, usersIdPutRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UsersApi.usersIdPut']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = UsersApiFp(configuration)
  return {
    /**
     * Gets the user that corresponds to the access token used in the request.
     * @summary Get the authorised user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    meGet(options?: RawAxiosRequestConfig): AxiosPromise<User> {
      return localVarFp.meGet(options).then((request) => request(axios, basePath))
    },
    /**
     * Gets a user by ID. You must be authorised as the target user in order to make this request.
     * @summary Get user
     * @param {UsersApiUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdGet(requestParameters: UsersApiUsersIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
      return localVarFp.usersIdGet(requestParameters.id, options).then((request) => request(axios, basePath))
    },
    /**
     * Updates the user by their ID. You must be authorised as the target user in order to make this request.
     * @summary Update user
     * @param {UsersApiUsersIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdPut(requestParameters: UsersApiUsersIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
      return localVarFp
        .usersIdPut(requestParameters.id, requestParameters.usersIdPutRequest, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for usersIdGet operation in UsersApi.
 * @export
 * @interface UsersApiUsersIdGetRequest
 */
export interface UsersApiUsersIdGetRequest {
  /**
   * The unique identifier of the user.
   * @type {number}
   * @memberof UsersApiUsersIdGet
   */
  readonly id: number
}

/**
 * Request parameters for usersIdPut operation in UsersApi.
 * @export
 * @interface UsersApiUsersIdPutRequest
 */
export interface UsersApiUsersIdPutRequest {
  /**
   * The unique identifier of the user.
   * @type {number}
   * @memberof UsersApiUsersIdPut
   */
  readonly id: number

  /**
   *
   * @type {UsersIdPutRequest}
   * @memberof UsersApiUsersIdPut
   */
  readonly usersIdPutRequest?: UsersIdPutRequest
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   * Gets the user that corresponds to the access token used in the request.
   * @summary Get the authorised user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public meGet(options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .meGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Gets a user by ID. You must be authorised as the target user in order to make this request.
   * @summary Get user
   * @param {UsersApiUsersIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersIdGet(requestParameters: UsersApiUsersIdGetRequest, options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .usersIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Updates the user by their ID. You must be authorised as the target user in order to make this request.
   * @summary Update user
   * @param {UsersApiUsersIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersIdPut(requestParameters: UsersApiUsersIdPutRequest, options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .usersIdPut(requestParameters.id, requestParameters.usersIdPutRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
