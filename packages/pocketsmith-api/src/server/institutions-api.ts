/* tslint:disable */
/* eslint-disable */
/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
import { BASE_PATH, type RequestArgs, BaseAPI, operationServerMap } from '../base'
import type { Institution, InstitutionsIdPutRequest, UsersIdInstitutionsPostRequest } from '../model'

/**
 * InstitutionsApi - axios parameter creator
 * @export
 */
export const InstitutionsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Deletes an institution and all data within. Alternatively, another institution can be provided to merge the data into to avoid losing it.
     * @summary Delete institution
     * @param {number} id The unique identifier of the institution.
     * @param {number} [mergeIntoInstitutionId] The unique identifier of the institution to merge into.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsIdDelete: async (
      id: number,
      mergeIntoInstitutionId?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('institutionsIdDelete', 'id', id)
      const localVarPath = `/institutions/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      if (mergeIntoInstitutionId !== undefined) {
        localVarQueryParameter['merge_into_institution_id'] = mergeIntoInstitutionId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Gets an institution by its ID.
     * @summary Get institution
     * @param {number} id The unique identifier of the institution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('institutionsIdGet', 'id', id)
      const localVarPath = `/institutions/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Updates the title and currency code for an institution.
     * @summary Update institution
     * @param {number} id The unique identifier of the institution.
     * @param {InstitutionsIdPutRequest} [institutionsIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsIdPut: async (
      id: number,
      institutionsIdPutRequest?: InstitutionsIdPutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('institutionsIdPut', 'id', id)
      const localVarPath = `/institutions/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        institutionsIdPutRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Lists all the institutions belonging to the user.
     * @summary List institutions in user
     * @param {number} id The unique identifier of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdInstitutionsGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('usersIdInstitutionsGet', 'id', id)
      const localVarPath = `/users/{id}/institutions`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Creates an institution belonging to a user.
     * @summary Create institution in user
     * @param {number} id The unique identifier of the user
     * @param {UsersIdInstitutionsPostRequest} [usersIdInstitutionsPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdInstitutionsPost: async (
      id: number,
      usersIdInstitutionsPostRequest?: UsersIdInstitutionsPostRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('usersIdInstitutionsPost', 'id', id)
      const localVarPath = `/users/{id}/institutions`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        usersIdInstitutionsPostRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * InstitutionsApi - functional programming interface
 * @export
 */
export const InstitutionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = InstitutionsApiAxiosParamCreator(configuration)
  return {
    /**
     * Deletes an institution and all data within. Alternatively, another institution can be provided to merge the data into to avoid losing it.
     * @summary Delete institution
     * @param {number} id The unique identifier of the institution.
     * @param {number} [mergeIntoInstitutionId] The unique identifier of the institution to merge into.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async institutionsIdDelete(
      id: number,
      mergeIntoInstitutionId?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.institutionsIdDelete(
        id,
        mergeIntoInstitutionId,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['InstitutionsApi.institutionsIdDelete']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Gets an institution by its ID.
     * @summary Get institution
     * @param {number} id The unique identifier of the institution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async institutionsIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Institution>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.institutionsIdGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['InstitutionsApi.institutionsIdGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Updates the title and currency code for an institution.
     * @summary Update institution
     * @param {number} id The unique identifier of the institution.
     * @param {InstitutionsIdPutRequest} [institutionsIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async institutionsIdPut(
      id: number,
      institutionsIdPutRequest?: InstitutionsIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Institution>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.institutionsIdPut(id, institutionsIdPutRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['InstitutionsApi.institutionsIdPut']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Lists all the institutions belonging to the user.
     * @summary List institutions in user
     * @param {number} id The unique identifier of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersIdInstitutionsGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Institution>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdInstitutionsGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['InstitutionsApi.usersIdInstitutionsGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Creates an institution belonging to a user.
     * @summary Create institution in user
     * @param {number} id The unique identifier of the user
     * @param {UsersIdInstitutionsPostRequest} [usersIdInstitutionsPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersIdInstitutionsPost(
      id: number,
      usersIdInstitutionsPostRequest?: UsersIdInstitutionsPostRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Institution>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdInstitutionsPost(
        id,
        usersIdInstitutionsPostRequest,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['InstitutionsApi.usersIdInstitutionsPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * InstitutionsApi - factory interface
 * @export
 */
export const InstitutionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = InstitutionsApiFp(configuration)
  return {
    /**
     * Deletes an institution and all data within. Alternatively, another institution can be provided to merge the data into to avoid losing it.
     * @summary Delete institution
     * @param {InstitutionsApiInstitutionsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsIdDelete(
      requestParameters: InstitutionsApiInstitutionsIdDeleteRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .institutionsIdDelete(requestParameters.id, requestParameters.mergeIntoInstitutionId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Gets an institution by its ID.
     * @summary Get institution
     * @param {InstitutionsApiInstitutionsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsIdGet(
      requestParameters: InstitutionsApiInstitutionsIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Institution> {
      return localVarFp.institutionsIdGet(requestParameters.id, options).then((request) => request(axios, basePath))
    },
    /**
     * Updates the title and currency code for an institution.
     * @summary Update institution
     * @param {InstitutionsApiInstitutionsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsIdPut(
      requestParameters: InstitutionsApiInstitutionsIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Institution> {
      return localVarFp
        .institutionsIdPut(requestParameters.id, requestParameters.institutionsIdPutRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Lists all the institutions belonging to the user.
     * @summary List institutions in user
     * @param {InstitutionsApiUsersIdInstitutionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdInstitutionsGet(
      requestParameters: InstitutionsApiUsersIdInstitutionsGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Institution>> {
      return localVarFp
        .usersIdInstitutionsGet(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Creates an institution belonging to a user.
     * @summary Create institution in user
     * @param {InstitutionsApiUsersIdInstitutionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdInstitutionsPost(
      requestParameters: InstitutionsApiUsersIdInstitutionsPostRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Institution> {
      return localVarFp
        .usersIdInstitutionsPost(requestParameters.id, requestParameters.usersIdInstitutionsPostRequest, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for institutionsIdDelete operation in InstitutionsApi.
 * @export
 * @interface InstitutionsApiInstitutionsIdDeleteRequest
 */
export interface InstitutionsApiInstitutionsIdDeleteRequest {
  /**
   * The unique identifier of the institution.
   * @type {number}
   * @memberof InstitutionsApiInstitutionsIdDelete
   */
  readonly id: number

  /**
   * The unique identifier of the institution to merge into.
   * @type {number}
   * @memberof InstitutionsApiInstitutionsIdDelete
   */
  readonly mergeIntoInstitutionId?: number
}

/**
 * Request parameters for institutionsIdGet operation in InstitutionsApi.
 * @export
 * @interface InstitutionsApiInstitutionsIdGetRequest
 */
export interface InstitutionsApiInstitutionsIdGetRequest {
  /**
   * The unique identifier of the institution.
   * @type {number}
   * @memberof InstitutionsApiInstitutionsIdGet
   */
  readonly id: number
}

/**
 * Request parameters for institutionsIdPut operation in InstitutionsApi.
 * @export
 * @interface InstitutionsApiInstitutionsIdPutRequest
 */
export interface InstitutionsApiInstitutionsIdPutRequest {
  /**
   * The unique identifier of the institution.
   * @type {number}
   * @memberof InstitutionsApiInstitutionsIdPut
   */
  readonly id: number

  /**
   *
   * @type {InstitutionsIdPutRequest}
   * @memberof InstitutionsApiInstitutionsIdPut
   */
  readonly institutionsIdPutRequest?: InstitutionsIdPutRequest
}

/**
 * Request parameters for usersIdInstitutionsGet operation in InstitutionsApi.
 * @export
 * @interface InstitutionsApiUsersIdInstitutionsGetRequest
 */
export interface InstitutionsApiUsersIdInstitutionsGetRequest {
  /**
   * The unique identifier of the user
   * @type {number}
   * @memberof InstitutionsApiUsersIdInstitutionsGet
   */
  readonly id: number
}

/**
 * Request parameters for usersIdInstitutionsPost operation in InstitutionsApi.
 * @export
 * @interface InstitutionsApiUsersIdInstitutionsPostRequest
 */
export interface InstitutionsApiUsersIdInstitutionsPostRequest {
  /**
   * The unique identifier of the user
   * @type {number}
   * @memberof InstitutionsApiUsersIdInstitutionsPost
   */
  readonly id: number

  /**
   *
   * @type {UsersIdInstitutionsPostRequest}
   * @memberof InstitutionsApiUsersIdInstitutionsPost
   */
  readonly usersIdInstitutionsPostRequest?: UsersIdInstitutionsPostRequest
}

/**
 * InstitutionsApi - object-oriented interface
 * @export
 * @class InstitutionsApi
 * @extends {BaseAPI}
 */
export class InstitutionsApi extends BaseAPI {
  /**
   * Deletes an institution and all data within. Alternatively, another institution can be provided to merge the data into to avoid losing it.
   * @summary Delete institution
   * @param {InstitutionsApiInstitutionsIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InstitutionsApi
   */
  public institutionsIdDelete(
    requestParameters: InstitutionsApiInstitutionsIdDeleteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return InstitutionsApiFp(this.configuration)
      .institutionsIdDelete(requestParameters.id, requestParameters.mergeIntoInstitutionId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Gets an institution by its ID.
   * @summary Get institution
   * @param {InstitutionsApiInstitutionsIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InstitutionsApi
   */
  public institutionsIdGet(
    requestParameters: InstitutionsApiInstitutionsIdGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return InstitutionsApiFp(this.configuration)
      .institutionsIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Updates the title and currency code for an institution.
   * @summary Update institution
   * @param {InstitutionsApiInstitutionsIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InstitutionsApi
   */
  public institutionsIdPut(
    requestParameters: InstitutionsApiInstitutionsIdPutRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return InstitutionsApiFp(this.configuration)
      .institutionsIdPut(requestParameters.id, requestParameters.institutionsIdPutRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Lists all the institutions belonging to the user.
   * @summary List institutions in user
   * @param {InstitutionsApiUsersIdInstitutionsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InstitutionsApi
   */
  public usersIdInstitutionsGet(
    requestParameters: InstitutionsApiUsersIdInstitutionsGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return InstitutionsApiFp(this.configuration)
      .usersIdInstitutionsGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Creates an institution belonging to a user.
   * @summary Create institution in user
   * @param {InstitutionsApiUsersIdInstitutionsPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InstitutionsApi
   */
  public usersIdInstitutionsPost(
    requestParameters: InstitutionsApiUsersIdInstitutionsPostRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return InstitutionsApiFp(this.configuration)
      .usersIdInstitutionsPost(requestParameters.id, requestParameters.usersIdInstitutionsPostRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
