/* tslint:disable */
/* eslint-disable */
/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { Transaction } from '../../model'
// @ts-ignore
import type { TransactionAccountsIdTransactionsPostRequest } from '../../model'
// @ts-ignore
import type { TransactionsIdPutRequest } from '../../model'
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export const TransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Lists transactions belonging to an account by its ID.
     * @summary List transactions in account
     * @param {number} id The unique identifier of the account.
     * @param {string} [startDate] Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user\&#39;s subscription.
     * @param {string} [endDate] Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today\&#39;s date.
     * @param {string} [updatedSince] Limit to transactions updated since an ISO 8601 timestamp.
     * @param {number} [uncategorised] Limit to uncategorised transactions.
     * @param {AccountsIdTransactionsGetType} [type] Limit to transactions of this type.
     * @param {number} [needsReview] Limit to transactions that need to be reviewed.
     * @param {string} [search] Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
     * @param {number} [page] Choose a particular page of the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsIdTransactionsGet: async (
      id: number,
      startDate?: string,
      endDate?: string,
      updatedSince?: string,
      uncategorised?: number,
      type?: AccountsIdTransactionsGetType,
      needsReview?: number,
      search?: string,
      page?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('accountsIdTransactionsGet', 'id', id)
      const localVarPath = `/accounts/{id}/transactions`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      if (startDate !== undefined) {
        localVarQueryParameter['start_date'] = startDate
      }

      if (endDate !== undefined) {
        localVarQueryParameter['end_date'] = endDate
      }

      if (updatedSince !== undefined) {
        localVarQueryParameter['updated_since'] = updatedSince
      }

      if (uncategorised !== undefined) {
        localVarQueryParameter['uncategorised'] = uncategorised
      }

      if (type !== undefined) {
        localVarQueryParameter['type'] = type
      }

      if (needsReview !== undefined) {
        localVarQueryParameter['needs_review'] = needsReview
      }

      if (search !== undefined) {
        localVarQueryParameter['search'] = search
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Lists transactions belonging to one or more categories by their IDs.
     * @summary List transactions in categories
     * @param {string} id A comma-separated list of category IDs.
     * @param {string} [startDate] Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user\&#39;s subscription.
     * @param {string} [endDate] Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today\&#39;s date.
     * @param {string} [updatedSince] Limit to transactions updated since an ISO 8601 timestamp.
     * @param {number} [uncategorised] Limit to uncategorised transactions.
     * @param {CategoriesIdTransactionsGetType} [type] Limit to transactions of this type.
     * @param {number} [needsReview] Limit to transactions that need to be reviewed.
     * @param {string} [search] Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
     * @param {number} [page] Choose a particular page of the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesIdTransactionsGet: async (
      id: string,
      startDate?: string,
      endDate?: string,
      updatedSince?: string,
      uncategorised?: number,
      type?: CategoriesIdTransactionsGetType,
      needsReview?: number,
      search?: string,
      page?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('categoriesIdTransactionsGet', 'id', id)
      const localVarPath = `/categories/{id}/transactions`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      if (startDate !== undefined) {
        localVarQueryParameter['start_date'] = startDate
      }

      if (endDate !== undefined) {
        localVarQueryParameter['end_date'] = endDate
      }

      if (updatedSince !== undefined) {
        localVarQueryParameter['updated_since'] = updatedSince
      }

      if (uncategorised !== undefined) {
        localVarQueryParameter['uncategorised'] = uncategorised
      }

      if (type !== undefined) {
        localVarQueryParameter['type'] = type
      }

      if (needsReview !== undefined) {
        localVarQueryParameter['needs_review'] = needsReview
      }

      if (search !== undefined) {
        localVarQueryParameter['search'] = search
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Lists transactions belonging to a transaction account by its ID.
     * @summary List transactions in transaction account
     * @param {number} id The unique identifier of the transaction account.
     * @param {string} [startDate] Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user\&#39;s subscription.
     * @param {string} [endDate] Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today\&#39;s date.
     * @param {string} [updatedSince] Limit to transactions updated since an ISO 8601 timestamp.
     * @param {number} [uncategorised] Limit to uncategorised transactions.
     * @param {TransactionAccountsIdTransactionsGetType} [type] Limit to transactions of this type.
     * @param {number} [needsReview] Limit to transactions that need to be reviewed.
     * @param {string} [search] Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
     * @param {number} [page] Choose a particular page of the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionAccountsIdTransactionsGet: async (
      id: number,
      startDate?: string,
      endDate?: string,
      updatedSince?: string,
      uncategorised?: number,
      type?: TransactionAccountsIdTransactionsGetType,
      needsReview?: number,
      search?: string,
      page?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('transactionAccountsIdTransactionsGet', 'id', id)
      const localVarPath = `/transaction_accounts/{id}/transactions`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      if (startDate !== undefined) {
        localVarQueryParameter['start_date'] = startDate
      }

      if (endDate !== undefined) {
        localVarQueryParameter['end_date'] = endDate
      }

      if (updatedSince !== undefined) {
        localVarQueryParameter['updated_since'] = updatedSince
      }

      if (uncategorised !== undefined) {
        localVarQueryParameter['uncategorised'] = uncategorised
      }

      if (type !== undefined) {
        localVarQueryParameter['type'] = type
      }

      if (needsReview !== undefined) {
        localVarQueryParameter['needs_review'] = needsReview
      }

      if (search !== undefined) {
        localVarQueryParameter['search'] = search
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Creates a transaction in a transaction account by its ID.
     * @summary Create a transaction in transaction account
     * @param {number} id The unique identifier of the transaction account.
     * @param {TransactionAccountsIdTransactionsPostRequest} [transactionAccountsIdTransactionsPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionAccountsIdTransactionsPost: async (
      id: number,
      transactionAccountsIdTransactionsPostRequest?: TransactionAccountsIdTransactionsPostRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('transactionAccountsIdTransactionsPost', 'id', id)
      const localVarPath = `/transaction_accounts/{id}/transactions`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        transactionAccountsIdTransactionsPostRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Deletes a transaction and all its data by ID.
     * @summary Delete transaction
     * @param {number} id The unique identifier of the transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('transactionsIdDelete', 'id', id)
      const localVarPath = `/transactions/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Gets a transaction by its ID.
     * @summary Get a transaction
     * @param {number} id The unique identifier of the transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('transactionsIdGet', 'id', id)
      const localVarPath = `/transactions/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Updates a transaction by its ID.
     * @summary Update a transaction
     * @param {number} id The unique identifier of the transaction.
     * @param {TransactionsIdPutRequest} [transactionsIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsIdPut: async (
      id: number,
      transactionsIdPutRequest?: TransactionsIdPutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('transactionsIdPut', 'id', id)
      const localVarPath = `/transactions/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        transactionsIdPutRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Lists transactions belonging to a user by their ID.
     * @summary List transactions in user
     * @param {number} id The unique identifier of the account.
     * @param {string} [startDate] Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user\&#39;s subscription.
     * @param {string} [endDate] Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today\&#39;s date.
     * @param {string} [updatedSince] Limit to transactions updated since an ISO 8601 timestamp.
     * @param {number} [uncategorised] Limit to uncategorised transactions.
     * @param {UsersIdTransactionsGetType} [type] Limit to transactions of this type.
     * @param {number} [needsReview] Limit to transactions that need to be reviewed.
     * @param {string} [search] Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
     * @param {number} [page] Choose a particular page of the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdTransactionsGet: async (
      id: number,
      startDate?: string,
      endDate?: string,
      updatedSince?: string,
      uncategorised?: number,
      type?: UsersIdTransactionsGetType,
      needsReview?: number,
      search?: string,
      page?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('usersIdTransactionsGet', 'id', id)
      const localVarPath = `/users/{id}/transactions`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      if (startDate !== undefined) {
        localVarQueryParameter['start_date'] = startDate
      }

      if (endDate !== undefined) {
        localVarQueryParameter['end_date'] = endDate
      }

      if (updatedSince !== undefined) {
        localVarQueryParameter['updated_since'] = updatedSince
      }

      if (uncategorised !== undefined) {
        localVarQueryParameter['uncategorised'] = uncategorised
      }

      if (type !== undefined) {
        localVarQueryParameter['type'] = type
      }

      if (needsReview !== undefined) {
        localVarQueryParameter['needs_review'] = needsReview
      }

      if (search !== undefined) {
        localVarQueryParameter['search'] = search
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * TransactionsApi - functional programming interface
 * @export
 */
export const TransactionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TransactionsApiAxiosParamCreator(configuration)
  return {
    /**
     * Lists transactions belonging to an account by its ID.
     * @summary List transactions in account
     * @param {number} id The unique identifier of the account.
     * @param {string} [startDate] Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user\&#39;s subscription.
     * @param {string} [endDate] Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today\&#39;s date.
     * @param {string} [updatedSince] Limit to transactions updated since an ISO 8601 timestamp.
     * @param {number} [uncategorised] Limit to uncategorised transactions.
     * @param {AccountsIdTransactionsGetType} [type] Limit to transactions of this type.
     * @param {number} [needsReview] Limit to transactions that need to be reviewed.
     * @param {string} [search] Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
     * @param {number} [page] Choose a particular page of the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accountsIdTransactionsGet(
      id: number,
      startDate?: string,
      endDate?: string,
      updatedSince?: string,
      uncategorised?: number,
      type?: AccountsIdTransactionsGetType,
      needsReview?: number,
      search?: string,
      page?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transaction>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.accountsIdTransactionsGet(
        id,
        startDate,
        endDate,
        updatedSince,
        uncategorised,
        type,
        needsReview,
        search,
        page,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['TransactionsApi.accountsIdTransactionsGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Lists transactions belonging to one or more categories by their IDs.
     * @summary List transactions in categories
     * @param {string} id A comma-separated list of category IDs.
     * @param {string} [startDate] Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user\&#39;s subscription.
     * @param {string} [endDate] Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today\&#39;s date.
     * @param {string} [updatedSince] Limit to transactions updated since an ISO 8601 timestamp.
     * @param {number} [uncategorised] Limit to uncategorised transactions.
     * @param {CategoriesIdTransactionsGetType} [type] Limit to transactions of this type.
     * @param {number} [needsReview] Limit to transactions that need to be reviewed.
     * @param {string} [search] Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
     * @param {number} [page] Choose a particular page of the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async categoriesIdTransactionsGet(
      id: string,
      startDate?: string,
      endDate?: string,
      updatedSince?: string,
      uncategorised?: number,
      type?: CategoriesIdTransactionsGetType,
      needsReview?: number,
      search?: string,
      page?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transaction>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesIdTransactionsGet(
        id,
        startDate,
        endDate,
        updatedSince,
        uncategorised,
        type,
        needsReview,
        search,
        page,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['TransactionsApi.categoriesIdTransactionsGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Lists transactions belonging to a transaction account by its ID.
     * @summary List transactions in transaction account
     * @param {number} id The unique identifier of the transaction account.
     * @param {string} [startDate] Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user\&#39;s subscription.
     * @param {string} [endDate] Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today\&#39;s date.
     * @param {string} [updatedSince] Limit to transactions updated since an ISO 8601 timestamp.
     * @param {number} [uncategorised] Limit to uncategorised transactions.
     * @param {TransactionAccountsIdTransactionsGetType} [type] Limit to transactions of this type.
     * @param {number} [needsReview] Limit to transactions that need to be reviewed.
     * @param {string} [search] Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
     * @param {number} [page] Choose a particular page of the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async transactionAccountsIdTransactionsGet(
      id: number,
      startDate?: string,
      endDate?: string,
      updatedSince?: string,
      uncategorised?: number,
      type?: TransactionAccountsIdTransactionsGetType,
      needsReview?: number,
      search?: string,
      page?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transaction>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.transactionAccountsIdTransactionsGet(
        id,
        startDate,
        endDate,
        updatedSince,
        uncategorised,
        type,
        needsReview,
        search,
        page,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['TransactionsApi.transactionAccountsIdTransactionsGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Creates a transaction in a transaction account by its ID.
     * @summary Create a transaction in transaction account
     * @param {number} id The unique identifier of the transaction account.
     * @param {TransactionAccountsIdTransactionsPostRequest} [transactionAccountsIdTransactionsPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async transactionAccountsIdTransactionsPost(
      id: number,
      transactionAccountsIdTransactionsPostRequest?: TransactionAccountsIdTransactionsPostRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.transactionAccountsIdTransactionsPost(
        id,
        transactionAccountsIdTransactionsPostRequest,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['TransactionsApi.transactionAccountsIdTransactionsPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Deletes a transaction and all its data by ID.
     * @summary Delete transaction
     * @param {number} id The unique identifier of the transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async transactionsIdDelete(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsIdDelete(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['TransactionsApi.transactionsIdDelete']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Gets a transaction by its ID.
     * @summary Get a transaction
     * @param {number} id The unique identifier of the transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async transactionsIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsIdGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['TransactionsApi.transactionsIdGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Updates a transaction by its ID.
     * @summary Update a transaction
     * @param {number} id The unique identifier of the transaction.
     * @param {TransactionsIdPutRequest} [transactionsIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async transactionsIdPut(
      id: number,
      transactionsIdPutRequest?: TransactionsIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsIdPut(id, transactionsIdPutRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['TransactionsApi.transactionsIdPut']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Lists transactions belonging to a user by their ID.
     * @summary List transactions in user
     * @param {number} id The unique identifier of the account.
     * @param {string} [startDate] Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user\&#39;s subscription.
     * @param {string} [endDate] Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today\&#39;s date.
     * @param {string} [updatedSince] Limit to transactions updated since an ISO 8601 timestamp.
     * @param {number} [uncategorised] Limit to uncategorised transactions.
     * @param {UsersIdTransactionsGetType} [type] Limit to transactions of this type.
     * @param {number} [needsReview] Limit to transactions that need to be reviewed.
     * @param {string} [search] Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
     * @param {number} [page] Choose a particular page of the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersIdTransactionsGet(
      id: number,
      startDate?: string,
      endDate?: string,
      updatedSince?: string,
      uncategorised?: number,
      type?: UsersIdTransactionsGetType,
      needsReview?: number,
      search?: string,
      page?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transaction>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdTransactionsGet(
        id,
        startDate,
        endDate,
        updatedSince,
        uncategorised,
        type,
        needsReview,
        search,
        page,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['TransactionsApi.usersIdTransactionsGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * TransactionsApi - factory interface
 * @export
 */
export const TransactionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TransactionsApiFp(configuration)
  return {
    /**
     * Lists transactions belonging to an account by its ID.
     * @summary List transactions in account
     * @param {TransactionsApiAccountsIdTransactionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsIdTransactionsGet(
      requestParameters: TransactionsApiAccountsIdTransactionsGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Transaction>> {
      return localVarFp
        .accountsIdTransactionsGet(
          requestParameters.id,
          requestParameters.startDate,
          requestParameters.endDate,
          requestParameters.updatedSince,
          requestParameters.uncategorised,
          requestParameters.type,
          requestParameters.needsReview,
          requestParameters.search,
          requestParameters.page,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Lists transactions belonging to one or more categories by their IDs.
     * @summary List transactions in categories
     * @param {TransactionsApiCategoriesIdTransactionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesIdTransactionsGet(
      requestParameters: TransactionsApiCategoriesIdTransactionsGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Transaction>> {
      return localVarFp
        .categoriesIdTransactionsGet(
          requestParameters.id,
          requestParameters.startDate,
          requestParameters.endDate,
          requestParameters.updatedSince,
          requestParameters.uncategorised,
          requestParameters.type,
          requestParameters.needsReview,
          requestParameters.search,
          requestParameters.page,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Lists transactions belonging to a transaction account by its ID.
     * @summary List transactions in transaction account
     * @param {TransactionsApiTransactionAccountsIdTransactionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionAccountsIdTransactionsGet(
      requestParameters: TransactionsApiTransactionAccountsIdTransactionsGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Transaction>> {
      return localVarFp
        .transactionAccountsIdTransactionsGet(
          requestParameters.id,
          requestParameters.startDate,
          requestParameters.endDate,
          requestParameters.updatedSince,
          requestParameters.uncategorised,
          requestParameters.type,
          requestParameters.needsReview,
          requestParameters.search,
          requestParameters.page,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Creates a transaction in a transaction account by its ID.
     * @summary Create a transaction in transaction account
     * @param {TransactionsApiTransactionAccountsIdTransactionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionAccountsIdTransactionsPost(
      requestParameters: TransactionsApiTransactionAccountsIdTransactionsPostRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Transaction> {
      return localVarFp
        .transactionAccountsIdTransactionsPost(
          requestParameters.id,
          requestParameters.transactionAccountsIdTransactionsPostRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Deletes a transaction and all its data by ID.
     * @summary Delete transaction
     * @param {TransactionsApiTransactionsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsIdDelete(
      requestParameters: TransactionsApiTransactionsIdDeleteRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp.transactionsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath))
    },
    /**
     * Gets a transaction by its ID.
     * @summary Get a transaction
     * @param {TransactionsApiTransactionsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsIdGet(
      requestParameters: TransactionsApiTransactionsIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Transaction> {
      return localVarFp.transactionsIdGet(requestParameters.id, options).then((request) => request(axios, basePath))
    },
    /**
     * Updates a transaction by its ID.
     * @summary Update a transaction
     * @param {TransactionsApiTransactionsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsIdPut(
      requestParameters: TransactionsApiTransactionsIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Transaction> {
      return localVarFp
        .transactionsIdPut(requestParameters.id, requestParameters.transactionsIdPutRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Lists transactions belonging to a user by their ID.
     * @summary List transactions in user
     * @param {TransactionsApiUsersIdTransactionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdTransactionsGet(
      requestParameters: TransactionsApiUsersIdTransactionsGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Transaction>> {
      return localVarFp
        .usersIdTransactionsGet(
          requestParameters.id,
          requestParameters.startDate,
          requestParameters.endDate,
          requestParameters.updatedSince,
          requestParameters.uncategorised,
          requestParameters.type,
          requestParameters.needsReview,
          requestParameters.search,
          requestParameters.page,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for accountsIdTransactionsGet operation in TransactionsApi.
 * @export
 * @interface TransactionsApiAccountsIdTransactionsGetRequest
 */
export interface TransactionsApiAccountsIdTransactionsGetRequest {
  /**
   * The unique identifier of the account.
   * @type {number}
   * @memberof TransactionsApiAccountsIdTransactionsGet
   */
  readonly id: number

  /**
   * Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user\&#39;s subscription.
   * @type {string}
   * @memberof TransactionsApiAccountsIdTransactionsGet
   */
  readonly startDate?: string

  /**
   * Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today\&#39;s date.
   * @type {string}
   * @memberof TransactionsApiAccountsIdTransactionsGet
   */
  readonly endDate?: string

  /**
   * Limit to transactions updated since an ISO 8601 timestamp.
   * @type {string}
   * @memberof TransactionsApiAccountsIdTransactionsGet
   */
  readonly updatedSince?: string

  /**
   * Limit to uncategorised transactions.
   * @type {number}
   * @memberof TransactionsApiAccountsIdTransactionsGet
   */
  readonly uncategorised?: number

  /**
   * Limit to transactions of this type.
   * @type {'debit' | 'credit'}
   * @memberof TransactionsApiAccountsIdTransactionsGet
   */
  readonly type?: AccountsIdTransactionsGetType

  /**
   * Limit to transactions that need to be reviewed.
   * @type {number}
   * @memberof TransactionsApiAccountsIdTransactionsGet
   */
  readonly needsReview?: number

  /**
   * Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
   * @type {string}
   * @memberof TransactionsApiAccountsIdTransactionsGet
   */
  readonly search?: string

  /**
   * Choose a particular page of the results.
   * @type {number}
   * @memberof TransactionsApiAccountsIdTransactionsGet
   */
  readonly page?: number
}

/**
 * Request parameters for categoriesIdTransactionsGet operation in TransactionsApi.
 * @export
 * @interface TransactionsApiCategoriesIdTransactionsGetRequest
 */
export interface TransactionsApiCategoriesIdTransactionsGetRequest {
  /**
   * A comma-separated list of category IDs.
   * @type {string}
   * @memberof TransactionsApiCategoriesIdTransactionsGet
   */
  readonly id: string

  /**
   * Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user\&#39;s subscription.
   * @type {string}
   * @memberof TransactionsApiCategoriesIdTransactionsGet
   */
  readonly startDate?: string

  /**
   * Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today\&#39;s date.
   * @type {string}
   * @memberof TransactionsApiCategoriesIdTransactionsGet
   */
  readonly endDate?: string

  /**
   * Limit to transactions updated since an ISO 8601 timestamp.
   * @type {string}
   * @memberof TransactionsApiCategoriesIdTransactionsGet
   */
  readonly updatedSince?: string

  /**
   * Limit to uncategorised transactions.
   * @type {number}
   * @memberof TransactionsApiCategoriesIdTransactionsGet
   */
  readonly uncategorised?: number

  /**
   * Limit to transactions of this type.
   * @type {'debit' | 'credit'}
   * @memberof TransactionsApiCategoriesIdTransactionsGet
   */
  readonly type?: CategoriesIdTransactionsGetType

  /**
   * Limit to transactions that need to be reviewed.
   * @type {number}
   * @memberof TransactionsApiCategoriesIdTransactionsGet
   */
  readonly needsReview?: number

  /**
   * Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
   * @type {string}
   * @memberof TransactionsApiCategoriesIdTransactionsGet
   */
  readonly search?: string

  /**
   * Choose a particular page of the results.
   * @type {number}
   * @memberof TransactionsApiCategoriesIdTransactionsGet
   */
  readonly page?: number
}

/**
 * Request parameters for transactionAccountsIdTransactionsGet operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionAccountsIdTransactionsGetRequest
 */
export interface TransactionsApiTransactionAccountsIdTransactionsGetRequest {
  /**
   * The unique identifier of the transaction account.
   * @type {number}
   * @memberof TransactionsApiTransactionAccountsIdTransactionsGet
   */
  readonly id: number

  /**
   * Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user\&#39;s subscription.
   * @type {string}
   * @memberof TransactionsApiTransactionAccountsIdTransactionsGet
   */
  readonly startDate?: string

  /**
   * Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today\&#39;s date.
   * @type {string}
   * @memberof TransactionsApiTransactionAccountsIdTransactionsGet
   */
  readonly endDate?: string

  /**
   * Limit to transactions updated since an ISO 8601 timestamp.
   * @type {string}
   * @memberof TransactionsApiTransactionAccountsIdTransactionsGet
   */
  readonly updatedSince?: string

  /**
   * Limit to uncategorised transactions.
   * @type {number}
   * @memberof TransactionsApiTransactionAccountsIdTransactionsGet
   */
  readonly uncategorised?: number

  /**
   * Limit to transactions of this type.
   * @type {'debit' | 'credit'}
   * @memberof TransactionsApiTransactionAccountsIdTransactionsGet
   */
  readonly type?: TransactionAccountsIdTransactionsGetType

  /**
   * Limit to transactions that need to be reviewed.
   * @type {number}
   * @memberof TransactionsApiTransactionAccountsIdTransactionsGet
   */
  readonly needsReview?: number

  /**
   * Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
   * @type {string}
   * @memberof TransactionsApiTransactionAccountsIdTransactionsGet
   */
  readonly search?: string

  /**
   * Choose a particular page of the results.
   * @type {number}
   * @memberof TransactionsApiTransactionAccountsIdTransactionsGet
   */
  readonly page?: number
}

/**
 * Request parameters for transactionAccountsIdTransactionsPost operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionAccountsIdTransactionsPostRequest
 */
export interface TransactionsApiTransactionAccountsIdTransactionsPostRequest {
  /**
   * The unique identifier of the transaction account.
   * @type {number}
   * @memberof TransactionsApiTransactionAccountsIdTransactionsPost
   */
  readonly id: number

  /**
   *
   * @type {TransactionAccountsIdTransactionsPostRequest}
   * @memberof TransactionsApiTransactionAccountsIdTransactionsPost
   */
  readonly transactionAccountsIdTransactionsPostRequest?: TransactionAccountsIdTransactionsPostRequest
}

/**
 * Request parameters for transactionsIdDelete operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionsIdDeleteRequest
 */
export interface TransactionsApiTransactionsIdDeleteRequest {
  /**
   * The unique identifier of the transaction.
   * @type {number}
   * @memberof TransactionsApiTransactionsIdDelete
   */
  readonly id: number
}

/**
 * Request parameters for transactionsIdGet operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionsIdGetRequest
 */
export interface TransactionsApiTransactionsIdGetRequest {
  /**
   * The unique identifier of the transaction.
   * @type {number}
   * @memberof TransactionsApiTransactionsIdGet
   */
  readonly id: number
}

/**
 * Request parameters for transactionsIdPut operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionsIdPutRequest
 */
export interface TransactionsApiTransactionsIdPutRequest {
  /**
   * The unique identifier of the transaction.
   * @type {number}
   * @memberof TransactionsApiTransactionsIdPut
   */
  readonly id: number

  /**
   *
   * @type {TransactionsIdPutRequest}
   * @memberof TransactionsApiTransactionsIdPut
   */
  readonly transactionsIdPutRequest?: TransactionsIdPutRequest
}

/**
 * Request parameters for usersIdTransactionsGet operation in TransactionsApi.
 * @export
 * @interface TransactionsApiUsersIdTransactionsGetRequest
 */
export interface TransactionsApiUsersIdTransactionsGetRequest {
  /**
   * The unique identifier of the account.
   * @type {number}
   * @memberof TransactionsApiUsersIdTransactionsGet
   */
  readonly id: number

  /**
   * Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user\&#39;s subscription.
   * @type {string}
   * @memberof TransactionsApiUsersIdTransactionsGet
   */
  readonly startDate?: string

  /**
   * Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today\&#39;s date.
   * @type {string}
   * @memberof TransactionsApiUsersIdTransactionsGet
   */
  readonly endDate?: string

  /**
   * Limit to transactions updated since an ISO 8601 timestamp.
   * @type {string}
   * @memberof TransactionsApiUsersIdTransactionsGet
   */
  readonly updatedSince?: string

  /**
   * Limit to uncategorised transactions.
   * @type {number}
   * @memberof TransactionsApiUsersIdTransactionsGet
   */
  readonly uncategorised?: number

  /**
   * Limit to transactions of this type.
   * @type {'debit' | 'credit'}
   * @memberof TransactionsApiUsersIdTransactionsGet
   */
  readonly type?: UsersIdTransactionsGetType

  /**
   * Limit to transactions that need to be reviewed.
   * @type {number}
   * @memberof TransactionsApiUsersIdTransactionsGet
   */
  readonly needsReview?: number

  /**
   * Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
   * @type {string}
   * @memberof TransactionsApiUsersIdTransactionsGet
   */
  readonly search?: string

  /**
   * Choose a particular page of the results.
   * @type {number}
   * @memberof TransactionsApiUsersIdTransactionsGet
   */
  readonly page?: number
}

/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export class TransactionsApi extends BaseAPI {
  /**
   * Lists transactions belonging to an account by its ID.
   * @summary List transactions in account
   * @param {TransactionsApiAccountsIdTransactionsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionsApi
   */
  public accountsIdTransactionsGet(
    requestParameters: TransactionsApiAccountsIdTransactionsGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TransactionsApiFp(this.configuration)
      .accountsIdTransactionsGet(
        requestParameters.id,
        requestParameters.startDate,
        requestParameters.endDate,
        requestParameters.updatedSince,
        requestParameters.uncategorised,
        requestParameters.type,
        requestParameters.needsReview,
        requestParameters.search,
        requestParameters.page,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Lists transactions belonging to one or more categories by their IDs.
   * @summary List transactions in categories
   * @param {TransactionsApiCategoriesIdTransactionsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionsApi
   */
  public categoriesIdTransactionsGet(
    requestParameters: TransactionsApiCategoriesIdTransactionsGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TransactionsApiFp(this.configuration)
      .categoriesIdTransactionsGet(
        requestParameters.id,
        requestParameters.startDate,
        requestParameters.endDate,
        requestParameters.updatedSince,
        requestParameters.uncategorised,
        requestParameters.type,
        requestParameters.needsReview,
        requestParameters.search,
        requestParameters.page,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Lists transactions belonging to a transaction account by its ID.
   * @summary List transactions in transaction account
   * @param {TransactionsApiTransactionAccountsIdTransactionsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionsApi
   */
  public transactionAccountsIdTransactionsGet(
    requestParameters: TransactionsApiTransactionAccountsIdTransactionsGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TransactionsApiFp(this.configuration)
      .transactionAccountsIdTransactionsGet(
        requestParameters.id,
        requestParameters.startDate,
        requestParameters.endDate,
        requestParameters.updatedSince,
        requestParameters.uncategorised,
        requestParameters.type,
        requestParameters.needsReview,
        requestParameters.search,
        requestParameters.page,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Creates a transaction in a transaction account by its ID.
   * @summary Create a transaction in transaction account
   * @param {TransactionsApiTransactionAccountsIdTransactionsPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionsApi
   */
  public transactionAccountsIdTransactionsPost(
    requestParameters: TransactionsApiTransactionAccountsIdTransactionsPostRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TransactionsApiFp(this.configuration)
      .transactionAccountsIdTransactionsPost(
        requestParameters.id,
        requestParameters.transactionAccountsIdTransactionsPostRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Deletes a transaction and all its data by ID.
   * @summary Delete transaction
   * @param {TransactionsApiTransactionsIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionsApi
   */
  public transactionsIdDelete(
    requestParameters: TransactionsApiTransactionsIdDeleteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TransactionsApiFp(this.configuration)
      .transactionsIdDelete(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Gets a transaction by its ID.
   * @summary Get a transaction
   * @param {TransactionsApiTransactionsIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionsApi
   */
  public transactionsIdGet(
    requestParameters: TransactionsApiTransactionsIdGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TransactionsApiFp(this.configuration)
      .transactionsIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Updates a transaction by its ID.
   * @summary Update a transaction
   * @param {TransactionsApiTransactionsIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionsApi
   */
  public transactionsIdPut(
    requestParameters: TransactionsApiTransactionsIdPutRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TransactionsApiFp(this.configuration)
      .transactionsIdPut(requestParameters.id, requestParameters.transactionsIdPutRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Lists transactions belonging to a user by their ID.
   * @summary List transactions in user
   * @param {TransactionsApiUsersIdTransactionsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionsApi
   */
  public usersIdTransactionsGet(
    requestParameters: TransactionsApiUsersIdTransactionsGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TransactionsApiFp(this.configuration)
      .usersIdTransactionsGet(
        requestParameters.id,
        requestParameters.startDate,
        requestParameters.endDate,
        requestParameters.updatedSince,
        requestParameters.uncategorised,
        requestParameters.type,
        requestParameters.needsReview,
        requestParameters.search,
        requestParameters.page,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * @export
 */
export const AccountsIdTransactionsGetType = {
  Debit: 'debit',
  Credit: 'credit',
} as const
export type AccountsIdTransactionsGetType =
  (typeof AccountsIdTransactionsGetType)[keyof typeof AccountsIdTransactionsGetType]
/**
 * @export
 */
export const CategoriesIdTransactionsGetType = {
  Debit: 'debit',
  Credit: 'credit',
} as const
export type CategoriesIdTransactionsGetType =
  (typeof CategoriesIdTransactionsGetType)[keyof typeof CategoriesIdTransactionsGetType]
/**
 * @export
 */
export const TransactionAccountsIdTransactionsGetType = {
  Debit: 'debit',
  Credit: 'credit',
} as const
export type TransactionAccountsIdTransactionsGetType =
  (typeof TransactionAccountsIdTransactionsGetType)[keyof typeof TransactionAccountsIdTransactionsGetType]
/**
 * @export
 */
export const UsersIdTransactionsGetType = {
  Debit: 'debit',
  Credit: 'credit',
} as const
export type UsersIdTransactionsGetType = (typeof UsersIdTransactionsGetType)[keyof typeof UsersIdTransactionsGetType]
