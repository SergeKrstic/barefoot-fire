/* tslint:disable */
/* eslint-disable */
/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { Attachment } from '../../model'
// @ts-ignore
import type { AttachmentsIdPutRequest } from '../../model'
// @ts-ignore
import type { TransactionsIdAttachmentsPostRequest } from '../../model'
// @ts-ignore
import type { UsersIdAttachmentsPostRequest } from '../../model'
/**
 * AttachmentsApi - axios parameter creator
 * @export
 */
export const AttachmentsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Deletes a particular attachment by its ID.
     * @summary Delete attachment
     * @param {number} id The unique identifier of the attachment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentsIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('attachmentsIdDelete', 'id', id)
      const localVarPath = `/attachments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Gets a particular attachment by its ID.
     * @summary Get attachment
     * @param {number} id The unique identifier of the attachment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('attachmentsIdGet', 'id', id)
      const localVarPath = `/attachments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Updates the title of the attachment.
     * @summary Update attachment
     * @param {number} id The unique identifier of the attachment.
     * @param {AttachmentsIdPutRequest} [attachmentsIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentsIdPut: async (
      id: number,
      attachmentsIdPutRequest?: AttachmentsIdPutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('attachmentsIdPut', 'id', id)
      const localVarPath = `/attachments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        attachmentsIdPutRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Lists attachments belonging to a transaction by their ID.
     * @summary List attachments in transaction
     * @param {number} id The unique identifier of the transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsIdAttachmentsGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('transactionsIdAttachmentsGet', 'id', id)
      const localVarPath = `/transactions/{id}/attachments`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Assigns an attachment to the transaction by their ID.
     * @summary Assigns attachment to transaction
     * @param {number} id The unique identifier of the transaction.
     * @param {TransactionsIdAttachmentsPostRequest} [transactionsIdAttachmentsPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsIdAttachmentsPost: async (
      id: number,
      transactionsIdAttachmentsPostRequest?: TransactionsIdAttachmentsPostRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('transactionsIdAttachmentsPost', 'id', id)
      const localVarPath = `/transactions/{id}/attachments`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        transactionsIdAttachmentsPostRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Unassigns a particular attachment by its ID from the transaction ID. This does not delete the attachment, it only removes its association from the transaction.
     * @summary Unassigns attachment in transaction
     * @param {number} transactionId The unique identifier of the transaction.
     * @param {number} attachmentId The unique identifier of the attachment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsTransactionIdAttachmentsAttachmentIdDelete: async (
      transactionId: number,
      attachmentId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'transactionId' is not null or undefined
      assertParamExists('transactionsTransactionIdAttachmentsAttachmentIdDelete', 'transactionId', transactionId)
      // verify required parameter 'attachmentId' is not null or undefined
      assertParamExists('transactionsTransactionIdAttachmentsAttachmentIdDelete', 'attachmentId', attachmentId)
      const localVarPath = `/transactions/{transaction_id}/attachments/{attachment_id}`
        .replace(`{${'transaction_id'}}`, encodeURIComponent(String(transactionId)))
        .replace(`{${'attachment_id'}}`, encodeURIComponent(String(attachmentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Lists attachments belonging to a user by their ID.
     * @summary Lists attachments in user
     * @param {number} id The unique identifier of the user.
     * @param {number} [unassigned] If set, returns unassigned attachments, that are available for assigning to a transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdAttachmentsGet: async (
      id: number,
      unassigned?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('usersIdAttachmentsGet', 'id', id)
      const localVarPath = `/users/{id}/attachments`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      if (unassigned !== undefined) {
        localVarQueryParameter['unassigned'] = unassigned
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Creates an attachment belonging to the user by their ID.
     * @summary Create attachment in user
     * @param {number} id The unique identifier of the user.
     * @param {UsersIdAttachmentsPostRequest} [usersIdAttachmentsPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdAttachmentsPost: async (
      id: number,
      usersIdAttachmentsPostRequest?: UsersIdAttachmentsPostRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('usersIdAttachmentsPost', 'id', id)
      const localVarPath = `/users/{id}/attachments`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication developerKey required
      await setApiKeyToObject(localVarHeaderParameter, 'X-Developer-Key', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        usersIdAttachmentsPostRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AttachmentsApi - functional programming interface
 * @export
 */
export const AttachmentsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AttachmentsApiAxiosParamCreator(configuration)
  return {
    /**
     * Deletes a particular attachment by its ID.
     * @summary Delete attachment
     * @param {number} id The unique identifier of the attachment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachmentsIdDelete(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.attachmentsIdDelete(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AttachmentsApi.attachmentsIdDelete']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Gets a particular attachment by its ID.
     * @summary Get attachment
     * @param {number} id The unique identifier of the attachment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachmentsIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attachment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.attachmentsIdGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AttachmentsApi.attachmentsIdGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Updates the title of the attachment.
     * @summary Update attachment
     * @param {number} id The unique identifier of the attachment.
     * @param {AttachmentsIdPutRequest} [attachmentsIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachmentsIdPut(
      id: number,
      attachmentsIdPutRequest?: AttachmentsIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attachment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.attachmentsIdPut(id, attachmentsIdPutRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AttachmentsApi.attachmentsIdPut']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Lists attachments belonging to a transaction by their ID.
     * @summary List attachments in transaction
     * @param {number} id The unique identifier of the transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async transactionsIdAttachmentsGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Attachment>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsIdAttachmentsGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AttachmentsApi.transactionsIdAttachmentsGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Assigns an attachment to the transaction by their ID.
     * @summary Assigns attachment to transaction
     * @param {number} id The unique identifier of the transaction.
     * @param {TransactionsIdAttachmentsPostRequest} [transactionsIdAttachmentsPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async transactionsIdAttachmentsPost(
      id: number,
      transactionsIdAttachmentsPostRequest?: TransactionsIdAttachmentsPostRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attachment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsIdAttachmentsPost(
        id,
        transactionsIdAttachmentsPostRequest,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AttachmentsApi.transactionsIdAttachmentsPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Unassigns a particular attachment by its ID from the transaction ID. This does not delete the attachment, it only removes its association from the transaction.
     * @summary Unassigns attachment in transaction
     * @param {number} transactionId The unique identifier of the transaction.
     * @param {number} attachmentId The unique identifier of the attachment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async transactionsTransactionIdAttachmentsAttachmentIdDelete(
      transactionId: number,
      attachmentId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsTransactionIdAttachmentsAttachmentIdDelete(
        transactionId,
        attachmentId,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AttachmentsApi.transactionsTransactionIdAttachmentsAttachmentIdDelete']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Lists attachments belonging to a user by their ID.
     * @summary Lists attachments in user
     * @param {number} id The unique identifier of the user.
     * @param {number} [unassigned] If set, returns unassigned attachments, that are available for assigning to a transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersIdAttachmentsGet(
      id: number,
      unassigned?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Attachment>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdAttachmentsGet(id, unassigned, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AttachmentsApi.usersIdAttachmentsGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Creates an attachment belonging to the user by their ID.
     * @summary Create attachment in user
     * @param {number} id The unique identifier of the user.
     * @param {UsersIdAttachmentsPostRequest} [usersIdAttachmentsPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersIdAttachmentsPost(
      id: number,
      usersIdAttachmentsPostRequest?: UsersIdAttachmentsPostRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attachment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdAttachmentsPost(
        id,
        usersIdAttachmentsPostRequest,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AttachmentsApi.usersIdAttachmentsPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * AttachmentsApi - factory interface
 * @export
 */
export const AttachmentsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AttachmentsApiFp(configuration)
  return {
    /**
     * Deletes a particular attachment by its ID.
     * @summary Delete attachment
     * @param {AttachmentsApiAttachmentsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentsIdDelete(
      requestParameters: AttachmentsApiAttachmentsIdDeleteRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp.attachmentsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath))
    },
    /**
     * Gets a particular attachment by its ID.
     * @summary Get attachment
     * @param {AttachmentsApiAttachmentsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentsIdGet(
      requestParameters: AttachmentsApiAttachmentsIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Attachment> {
      return localVarFp.attachmentsIdGet(requestParameters.id, options).then((request) => request(axios, basePath))
    },
    /**
     * Updates the title of the attachment.
     * @summary Update attachment
     * @param {AttachmentsApiAttachmentsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentsIdPut(
      requestParameters: AttachmentsApiAttachmentsIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Attachment> {
      return localVarFp
        .attachmentsIdPut(requestParameters.id, requestParameters.attachmentsIdPutRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Lists attachments belonging to a transaction by their ID.
     * @summary List attachments in transaction
     * @param {AttachmentsApiTransactionsIdAttachmentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsIdAttachmentsGet(
      requestParameters: AttachmentsApiTransactionsIdAttachmentsGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Attachment>> {
      return localVarFp
        .transactionsIdAttachmentsGet(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Assigns an attachment to the transaction by their ID.
     * @summary Assigns attachment to transaction
     * @param {AttachmentsApiTransactionsIdAttachmentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsIdAttachmentsPost(
      requestParameters: AttachmentsApiTransactionsIdAttachmentsPostRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Attachment> {
      return localVarFp
        .transactionsIdAttachmentsPost(
          requestParameters.id,
          requestParameters.transactionsIdAttachmentsPostRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Unassigns a particular attachment by its ID from the transaction ID. This does not delete the attachment, it only removes its association from the transaction.
     * @summary Unassigns attachment in transaction
     * @param {AttachmentsApiTransactionsTransactionIdAttachmentsAttachmentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsTransactionIdAttachmentsAttachmentIdDelete(
      requestParameters: AttachmentsApiTransactionsTransactionIdAttachmentsAttachmentIdDeleteRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .transactionsTransactionIdAttachmentsAttachmentIdDelete(
          requestParameters.transactionId,
          requestParameters.attachmentId,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Lists attachments belonging to a user by their ID.
     * @summary Lists attachments in user
     * @param {AttachmentsApiUsersIdAttachmentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdAttachmentsGet(
      requestParameters: AttachmentsApiUsersIdAttachmentsGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Attachment>> {
      return localVarFp
        .usersIdAttachmentsGet(requestParameters.id, requestParameters.unassigned, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Creates an attachment belonging to the user by their ID.
     * @summary Create attachment in user
     * @param {AttachmentsApiUsersIdAttachmentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdAttachmentsPost(
      requestParameters: AttachmentsApiUsersIdAttachmentsPostRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Attachment> {
      return localVarFp
        .usersIdAttachmentsPost(requestParameters.id, requestParameters.usersIdAttachmentsPostRequest, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for attachmentsIdDelete operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiAttachmentsIdDeleteRequest
 */
export interface AttachmentsApiAttachmentsIdDeleteRequest {
  /**
   * The unique identifier of the attachment.
   * @type {number}
   * @memberof AttachmentsApiAttachmentsIdDelete
   */
  readonly id: number
}

/**
 * Request parameters for attachmentsIdGet operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiAttachmentsIdGetRequest
 */
export interface AttachmentsApiAttachmentsIdGetRequest {
  /**
   * The unique identifier of the attachment.
   * @type {number}
   * @memberof AttachmentsApiAttachmentsIdGet
   */
  readonly id: number
}

/**
 * Request parameters for attachmentsIdPut operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiAttachmentsIdPutRequest
 */
export interface AttachmentsApiAttachmentsIdPutRequest {
  /**
   * The unique identifier of the attachment.
   * @type {number}
   * @memberof AttachmentsApiAttachmentsIdPut
   */
  readonly id: number

  /**
   *
   * @type {AttachmentsIdPutRequest}
   * @memberof AttachmentsApiAttachmentsIdPut
   */
  readonly attachmentsIdPutRequest?: AttachmentsIdPutRequest
}

/**
 * Request parameters for transactionsIdAttachmentsGet operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiTransactionsIdAttachmentsGetRequest
 */
export interface AttachmentsApiTransactionsIdAttachmentsGetRequest {
  /**
   * The unique identifier of the transaction.
   * @type {number}
   * @memberof AttachmentsApiTransactionsIdAttachmentsGet
   */
  readonly id: number
}

/**
 * Request parameters for transactionsIdAttachmentsPost operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiTransactionsIdAttachmentsPostRequest
 */
export interface AttachmentsApiTransactionsIdAttachmentsPostRequest {
  /**
   * The unique identifier of the transaction.
   * @type {number}
   * @memberof AttachmentsApiTransactionsIdAttachmentsPost
   */
  readonly id: number

  /**
   *
   * @type {TransactionsIdAttachmentsPostRequest}
   * @memberof AttachmentsApiTransactionsIdAttachmentsPost
   */
  readonly transactionsIdAttachmentsPostRequest?: TransactionsIdAttachmentsPostRequest
}

/**
 * Request parameters for transactionsTransactionIdAttachmentsAttachmentIdDelete operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiTransactionsTransactionIdAttachmentsAttachmentIdDeleteRequest
 */
export interface AttachmentsApiTransactionsTransactionIdAttachmentsAttachmentIdDeleteRequest {
  /**
   * The unique identifier of the transaction.
   * @type {number}
   * @memberof AttachmentsApiTransactionsTransactionIdAttachmentsAttachmentIdDelete
   */
  readonly transactionId: number

  /**
   * The unique identifier of the attachment.
   * @type {number}
   * @memberof AttachmentsApiTransactionsTransactionIdAttachmentsAttachmentIdDelete
   */
  readonly attachmentId: number
}

/**
 * Request parameters for usersIdAttachmentsGet operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiUsersIdAttachmentsGetRequest
 */
export interface AttachmentsApiUsersIdAttachmentsGetRequest {
  /**
   * The unique identifier of the user.
   * @type {number}
   * @memberof AttachmentsApiUsersIdAttachmentsGet
   */
  readonly id: number

  /**
   * If set, returns unassigned attachments, that are available for assigning to a transaction.
   * @type {number}
   * @memberof AttachmentsApiUsersIdAttachmentsGet
   */
  readonly unassigned?: number
}

/**
 * Request parameters for usersIdAttachmentsPost operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiUsersIdAttachmentsPostRequest
 */
export interface AttachmentsApiUsersIdAttachmentsPostRequest {
  /**
   * The unique identifier of the user.
   * @type {number}
   * @memberof AttachmentsApiUsersIdAttachmentsPost
   */
  readonly id: number

  /**
   *
   * @type {UsersIdAttachmentsPostRequest}
   * @memberof AttachmentsApiUsersIdAttachmentsPost
   */
  readonly usersIdAttachmentsPostRequest?: UsersIdAttachmentsPostRequest
}

/**
 * AttachmentsApi - object-oriented interface
 * @export
 * @class AttachmentsApi
 * @extends {BaseAPI}
 */
export class AttachmentsApi extends BaseAPI {
  /**
   * Deletes a particular attachment by its ID.
   * @summary Delete attachment
   * @param {AttachmentsApiAttachmentsIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttachmentsApi
   */
  public attachmentsIdDelete(
    requestParameters: AttachmentsApiAttachmentsIdDeleteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AttachmentsApiFp(this.configuration)
      .attachmentsIdDelete(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Gets a particular attachment by its ID.
   * @summary Get attachment
   * @param {AttachmentsApiAttachmentsIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttachmentsApi
   */
  public attachmentsIdGet(requestParameters: AttachmentsApiAttachmentsIdGetRequest, options?: RawAxiosRequestConfig) {
    return AttachmentsApiFp(this.configuration)
      .attachmentsIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Updates the title of the attachment.
   * @summary Update attachment
   * @param {AttachmentsApiAttachmentsIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttachmentsApi
   */
  public attachmentsIdPut(requestParameters: AttachmentsApiAttachmentsIdPutRequest, options?: RawAxiosRequestConfig) {
    return AttachmentsApiFp(this.configuration)
      .attachmentsIdPut(requestParameters.id, requestParameters.attachmentsIdPutRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Lists attachments belonging to a transaction by their ID.
   * @summary List attachments in transaction
   * @param {AttachmentsApiTransactionsIdAttachmentsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttachmentsApi
   */
  public transactionsIdAttachmentsGet(
    requestParameters: AttachmentsApiTransactionsIdAttachmentsGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AttachmentsApiFp(this.configuration)
      .transactionsIdAttachmentsGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Assigns an attachment to the transaction by their ID.
   * @summary Assigns attachment to transaction
   * @param {AttachmentsApiTransactionsIdAttachmentsPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttachmentsApi
   */
  public transactionsIdAttachmentsPost(
    requestParameters: AttachmentsApiTransactionsIdAttachmentsPostRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AttachmentsApiFp(this.configuration)
      .transactionsIdAttachmentsPost(
        requestParameters.id,
        requestParameters.transactionsIdAttachmentsPostRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Unassigns a particular attachment by its ID from the transaction ID. This does not delete the attachment, it only removes its association from the transaction.
   * @summary Unassigns attachment in transaction
   * @param {AttachmentsApiTransactionsTransactionIdAttachmentsAttachmentIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttachmentsApi
   */
  public transactionsTransactionIdAttachmentsAttachmentIdDelete(
    requestParameters: AttachmentsApiTransactionsTransactionIdAttachmentsAttachmentIdDeleteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AttachmentsApiFp(this.configuration)
      .transactionsTransactionIdAttachmentsAttachmentIdDelete(
        requestParameters.transactionId,
        requestParameters.attachmentId,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Lists attachments belonging to a user by their ID.
   * @summary Lists attachments in user
   * @param {AttachmentsApiUsersIdAttachmentsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttachmentsApi
   */
  public usersIdAttachmentsGet(
    requestParameters: AttachmentsApiUsersIdAttachmentsGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AttachmentsApiFp(this.configuration)
      .usersIdAttachmentsGet(requestParameters.id, requestParameters.unassigned, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Creates an attachment belonging to the user by their ID.
   * @summary Create attachment in user
   * @param {AttachmentsApiUsersIdAttachmentsPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttachmentsApi
   */
  public usersIdAttachmentsPost(
    requestParameters: AttachmentsApiUsersIdAttachmentsPostRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AttachmentsApiFp(this.configuration)
      .usersIdAttachmentsPost(requestParameters.id, requestParameters.usersIdAttachmentsPostRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
